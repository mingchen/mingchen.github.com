<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Ming's Blog]]></title>
  <link href="http://blog.chenming.info/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.chenming.info/"/>
  <updated>2014-04-17T17:08:50-07:00</updated>
  <id>http://blog.chenming.info/</id>
  <author>
    <name><![CDATA[Ming]]></name>
    <email><![CDATA[chenming_cd@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenSSL Heartbleed漏洞对Android的影响]]></title>
    <link href="http://blog.chenming.info/blog/2014/04/10/openssl-heartbleed-impact-on-android/"/>
    <updated>2014-04-10T12:12:00-07:00</updated>
    <id>http://blog.chenming.info/blog/2014/04/10/openssl-heartbleed-impact-on-android</id>
    <content type="html"><![CDATA[<p>前两天爆出来的<a href="http://heartbleed.com/">OpenSSL Heartbleed高危漏洞</a>是如此的重要，
以至于有一个<a href="http://heartbleed.com/">专门的网站</a>为它诞生。
它的影响主要是在服务器侧，但是它同样能对客户端造成影响。</p>

<p><blockquote><p>Bug is in the OpenSSL's implementation of the TLS/DTLS (transport layer security protocols) heartbeat extension (RFC6520). When it is exploited it leads to the leak of memory contents from the server to the client and from the client to the server.</p></blockquote></p>

<p>详细的bug分析可以参考<a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">这里</a>。</p>

<p>因为Android上的程序一般都不作为HTTPS服务器运行，所以一般情况下该漏洞不会对Android有影响。那它在什么样的情况下能对客户端造成影响呢？</p>

<p>一种典型的情况是当你使用有漏洞的浏览器（比如某些版本的Chrome）访问一个利用了该漏洞的HTTPS服务器，服务器就能利用该漏洞读取客户端的额外的内存信息。</p>

<p>这里有一个<a href="http://www.digitaltrends.com/mobile/heartbleed-bug-apps-affected-list/">列表</a>列出了Android系统的app的受影响情况。</p>

<p>基本上来说虽然存在被攻击的可能性，但是这种可能性很小，不用担心你Android手机的安全。</p>

<h3>参考</h3>

<ul>
<li><a href="http://heartbleed.com/">Heartbleed主页</a></li>
<li><a href="https://www.openssl.org/news/secadv_20140407.txt">OpenSSL security advisory</a></li>
<li><a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html">Diagnosis of the OpenSSL Heartbleed Bug</a></li>
<li><a href="http://googleonlinesecurity.blogspot.de/2014/04/google-services-updated-to-address.html">Google Services Updated to Address OpenSSL CVE-2014-0160 (the Heartbleed
bug)</a></li>
<li><a href="http://www.digitaltrends.com/mobile/heartbleed-bug-apps-affected-list/">Heartbleed影响的mobile app列表</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.lookout.heartbleeddetector">Heartbleed Detector</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android APK解析及反编译]]></title>
    <link href="http://blog.chenming.info/blog/2013/05/02/android-hack-tools/"/>
    <updated>2013-05-02T15:22:00-07:00</updated>
    <id>http://blog.chenming.info/blog/2013/05/02/android-hack-tools</id>
    <content type="html"><![CDATA[<h2>APK文件格式</h2>

<p>APK实质上是一个压缩文件(基于Java的jar包格式）。
它的MIME类型为：<code>application/vnd.android.package-archive</code>。</p>

<p>你可以直接使用 <code>unzip</code> 命令进行解压缩并查看里面的内容。
解压缩一个标准的APK文件包含如下内容：</p>

<ul>
<li>META-INF directory:

<ul>
<li>MANIFEST.MF: the Manifest file</li>
<li>CERT.RSA: The certificate of the application.</li>
<li>CERT.SF: The list of resources and SHA-1 digest;</li>
</ul>
</li>
<li>lib: the directory containing the compiled code that is specific
to a software layer of a processor, the folder is split into more folders within it:

<ul>
<li>armeabi: compiled code for all ARM based processors only</li>
<li>armeabi-v7a: compiled code for all ARMv7 and above based processors only</li>
<li>x86: compiled code for x86 processors only</li>
<li>mips: compiled code for MIPS processors only</li>
</ul>
</li>
<li>res: the directory containing resources not compiled into resources.arsc (see below).</li>
<li>assets: a directory containing applications assets,
which can be retrieved by AssetManager.</li>
<li>AndroidManifest.xml: An additional Android manifest file, describing the name,
version, access rights, referenced library files for the application.
This file may be in Android binary XML that can be converted into human-readable
plaintext XML with tools such as AXMLPrinter2, apktool, or Androguard.</li>
<li>classes.dex: The classes compiled in the dex file format understandable
by the Dalvik virtual machine</li>
<li>resources.arsc : a file containing pre-compiled resources,
such as binary XML for example.</li>
</ul>


<p>使用 <code>unzip</code> 加压缩后的内容是不可读的：</p>

<ul>
<li>AndroidManifest.xml 是二进制格式的，无法直接阅读。</li>
<li>资源文件（比如layout，string等）也是二进制格式</li>
<li>可执行代码是 .dex格式，也无法直接读取。</li>
</ul>


<h2>反编译APK</h2>

<h3>android-apktool</h3>

<p>为了能顺利的阅读这些进过编码的文件，需要对APK进行反编译， <a href="https://code.google.com/p/android-apktool">android-apktool</a> 就是专门用来干这个事的。</p>

<blockquote><p>It is a tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with app easier because of project-like files structure and automation of some repetitive tasks like building apk, etc.</p></blockquote>

<p>下载后解压缩后能得到 <code>apktool.jar</code>，<code>apktool</code> 和 <code>aapt</code> 三个程序。
其中 <code>apktool</code> 是 <code>apktool.jar</code> 的封装。使用的时候使用 <code>apktool</code> 即可。</p>

<p><code>apktool</code> 能对 <code>apk</code> 文件进行反编译，包括反编译 <code>AndroidManifest.xml</code> 和资源文件。
它会dex文件反编译成 <code>smali</code> 的格式，类似java的字节码。</p>

<pre><code>$ apktool
Apktool v1.5.2 - a tool for reengineering Android apk files
Copyright 2010 Ryszard Wi?niewski &lt;brut.alll@gmail.com&gt;
with smali v1.4.1, and baksmali v1.4.1
Updated by @iBotPeaches &lt;connor.tumbleson@gmail.com&gt;
Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)

Usage: apktool [-q|--quiet OR -v|--verbose] COMMAND [...]

COMMANDs are:

    d[ecode] [OPTS] &lt;file.apk&gt; [&lt;dir&gt;]
        Decode &lt;file.apk&gt; to &lt;dir&gt;.

        OPTS:

        -s, --no-src
            Do not decode sources.
        -r, --no-res
            Do not decode resources.
        -d, --debug
            Decode in debug mode. Check project page for more info.
        -b, --no-debug-info
            Baksmali -- don't write out debug info (.local, .param, .line, etc.)
        -f, --force
            Force delete destination directory.
        -t &lt;tag&gt;, --frame-tag &lt;tag&gt;
            Try to use framework files tagged by &lt;tag&gt;.
        --frame-path &lt;dir&gt;
            Use the specified directory for framework files
        --keep-broken-res
            Use if there was an error and some resources were dropped, e.g.:
            "Invalid config flags detected. Dropping resources", but you
            want to decode them anyway, even with errors. You will have to
            fix them manually before building.

    b[uild] [OPTS] [&lt;app_path&gt;] [&lt;out_file&gt;]
        Build an apk from already decoded application located in &lt;app_path&gt;.

        It will automatically detect, whether files was changed and perform
        needed steps only.

        If you omit &lt;app_path&gt; then current directory will be used.
        If you omit &lt;out_file&gt; then &lt;app_path&gt;/dist/&lt;name_of_original.apk&gt;
        will be used.

        OPTS:

        -f, --force-all
            Skip changes detection and build all files.
        -d, --debug
            Build in debug mode. Check project page for more info.
        -a, --aapt
            Loads aapt from specified location.

    if|install-framework &lt;framework.apk&gt; [&lt;tag&gt;] --frame-path [&lt;location&gt;]
        Install framework file to your system.

For additional info, see: http://code.google.com/p/android-apktool/
For smali/baksmali info, see: http://code.google.com/p/smali/
</code></pre>

<p>要反编译一个apk文件，可以执行如下命令:</p>

<pre><code>$ apktool d foo.apk
</code></pre>

<p>它会生成一个 foo 的目录来存放反编译的结果。</p>

<h3>dextojar + jd-gui</h3>

<p>另外一个反编译的工具是 <a href="">dextojar</a>，它能把 <code>.dex</code> 文件反编译成 <code>.jar</code> 文件。</p>

<p><code>dex2jar</code> 包含4个工具：</p>

<ul>
<li><em>dex-reader</em> is designed to read the Dalvik Executable (.dex/.odex) format. It has a light weight API similar with ASM.</li>
<li><em>dex-translator</em> is designed to do the convert job. It reads the dex instruction to * dex-ir format, after some optimize, convert to ASM format.</li>
<li><em>dex-ir</em> used by dex-translator, is designed to represent the dex instruction</li>
<li><em>dex-tools</em> tools to work with .class files. here are examples:
<strong> Modify a apk
</strong> DeObfuscate a jar</li>
</ul>


<p><code>dex2jar</code> 的用法也很简单：</p>

<pre><code>$ d2j-dex2jar.sh classes.dex
dex2jar classes.dex -&gt; classes-dex2jar.jar
</code></pre>

<p>反编译之后获得 <code>.jar</code> 文件，这个时候就可以使用java的反编译工具如<a href="http://java.decompiler.free.fr/?q=jdgui">jd-gui</a>来查看java代码了。</p>

<h2>参考</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/APK_(file_format)">APK (file format)</a></li>
<li><a href="https://code.google.com/p/android-apktool">android-apktool</a></li>
<li><a href="http://java.decompiler.free.fr/?q=jdgui">jd-gui</a></li>
<li><a href="https://code.google.com/p/dex2jar/">dex2jar</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android的Library工程]]></title>
    <link href="http://blog.chenming.info/blog/2013/01/04/android-library-jar/"/>
    <updated>2013-01-04T15:02:00-08:00</updated>
    <id>http://blog.chenming.info/blog/2013/01/04/android-library-jar</id>
    <content type="html"><![CDATA[<h2>为什么要使用Android的Library工程？</h2>

<p>简单的说就是减少代码拷贝。</p>

<blockquote><p>An Android library project is a development project that holds shared Android source code and resources. Other Android application projects can reference the library project and, at build time, include its compiled sources in their .apk files. Multiple application projects can reference the same library project and any single application project can reference multiple library projects.</p></blockquote>

<h2>Android Library工程开发中需要考虑的问题</h2>

<h3>能把Android的Library工程打成一个单独的jar包发布吗？</h3>

<p>如果工程是纯粹的Java文件，那么这和一个普通的java library工程没有区别，
可以打成jar包来发布。
在<code>custom_rules.xml</code>里添加如下两个target即可使用<code>ant</code>来编译jar包了：</p>

<pre><code>&lt;target name="jar" depends="-compile" description="Build binary jar"&gt;
    &lt;jar destfile="${ant.project.name}.jar" basedir="${out.classes.absolute.dir}" &gt;
        &lt;include name="com/example/android/**" /&gt;
    &lt;/jar&gt;
&lt;/target&gt;

&lt;target name="src-jar" description="bundle sources in a jar"&gt;
    &lt;jar destfile="${ant.project.name}-src.jar" basedir="src"/&gt;
&lt;/target&gt;
</code></pre>

<p>但是如果Library工程有资源（string, layout等），针对 ADT r21 的答案是不行的。</p>

<blockquote><p>You cannot export a library project to a JAR file.
A library cannot be distributed as a binary file (such as a JAR file). This will be added in a future version of the SDK
Tools.</p></blockquote>

<p>针对Library工程有资源但又不想发布源代码的一种workaround的方法是把src目录进行编译后成jar包，然后发布的时候发布资源和jar包。在主工程中把Library工程的jar包放在libs目录下即可正常编译。
当然如果工程文件的<code>AndroidManifest.xml</code>里的内容需要合并到主工程的<code>AndroidManifest.xml</code>里。
合并<code>AndroidManifest.xml</code>的需求已经在Android Tools的<a href="http://tools.android.com/roadmap">Roadmap</a>里，但何时能实现还未知。</p>

<h3>资源冲突</h3>

<p>如果在Library的<code>strings.xml</code>和主工程的<code>strings.xml</code>都定义了<code>hello_world</code>，
那么编译后的apk会优先使用主工程的<code>hello_world</code>。
为了避免冲突，建议在Library的工程中对所有资源添加前缀。</p>

<blockquote><p>Since the tools merge the resources of a library project with those of a dependent application project, a given resource ID might be defined in both projects. In this case, the tools select the resource from the application, or the library with highest priority, and discard the other resource. As you develop your applications, be aware that common resource IDs are likely to be defined in more than one project and will be merged, with the resource from the application or highest-priority library taking precedence.
To avoid resource conflicts for common resource IDs, consider using a prefix or other consistent naming scheme that is unique to the project (or is unique across all projects).</p></blockquote>

<h3>Library工程文件不能包含assets</h3>

<p>Library工程不能在assets目录下存放raw资源，必须存放在主工程的assets目录下。</p>

<p>但是支持使用res目录来存放资源。</p>

<h3>每个Library工程都有自己的R文件</h3>

<p>每个Library工程在编译后都会在gen目录生成自己的R.java文件。</p>

<h3>为Library工程创建测试工程</h3>

<p>要的测试工程本身可以直接引用Library工程，测试工程本身也是APK。</p>

<p>通常的做法是在Library工程下创建一个tests目录用来存放测试工程。</p>

<p>需要在测试工程的<code>AndroidManifest.xml</code>的<code>&lt;application&gt;</code>中加入让它成为一个测试工程。</p>

<pre><code>&lt;uses-library android:name="android.test.runner" /&gt;
</code></pre>

<p>同时在<code>project.properties</code>中加入对Library工程的引用：</p>

<pre><code># Project target.
target=android-8
android.library.reference.1=.. 
</code></pre>

<h2>参考:</h2>

<ul>
<li><a href="http://developer.android.com/tools/projects/index.html#LibraryProjects">Android SDK document - library project</a></li>
<li><a href="http://tools.android.com/recent/buildchangesinrevision14">Build changes in revision 14</a></li>
<li><a href="http://android-developers.blogspot.com/2011/10/changes-to-library-projects-in-android.html">Changes to Library Projects in Android SDK Tools, r14</a></li>
<li><a href="http://tools.android.com/roadmap">Android Tools Roadmap</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android的硬件加速及可能导致的问题]]></title>
    <link href="http://blog.chenming.info/blog/2012/09/18/android-hardware-accel/"/>
    <updated>2012-09-18T14:39:00-07:00</updated>
    <id>http://blog.chenming.info/blog/2012/09/18/android-hardware-accel</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>在Android 4.0的某些设备上，在<code>View</code>刷新时会出现花屏和屏幕上的某些View错位的现象。
经过调查后发现<code>adb logcat</code>中出现很多<code>OpenGLRenderer: 0x501</code>的错位：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>09-18 14:34:39.090: DEBUG/OpenGLRenderer(3104): GL error from OpenGLRenderer: 0x501
</span><span class='line'>09-18 14:34:39.386: DEBUG/OpenGLRenderer(3104): GL error from OpenGLRenderer: 0x501
</span><span class='line'>09-18 14:34:39.656: DEBUG/OpenGLRenderer(3104): GL error from OpenGLRenderer: 0x501</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>从这个日志，初步怀疑是硬件加速导致的问题。
经过分析发现使用了比较复杂的自定义<code>View</code>，可能会导致硬件加速渲染出错。</p>

<h2>硬件加速的优点与缺点</h2>

<p>硬件加速能使用GPU来加速2D图像的渲染速度，但是硬件加速并不能完全支持所有的渲染操作，
针对自定义的View，硬件加速可能导致渲染出现错误。
如果有自定义的View，需要在硬件加速的设备上进行测试，如果出现渲染的问题，需要关闭硬件加速。</p>

<h2>开启和关闭硬件加速</h2>

<p>对硬件加速的开关可以在不同的级别进行控制：</p>

<ul>
<li>Application</li>
<li>Activity</li>
<li>Windows</li>
<li>View</li>
</ul>


<h3>Application级别</h3>

<p>在Applciation级别控制硬件加速的开关：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;application android:hardwareAccelerated="true" ...></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Activity级别</h3>

<p>可以对单个的<code>Activity</code>控制是否启用硬件加速：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;application android:hardwareAccelerated="true">&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;activity ... /&gt;
</span><span class='line'>&lt;activity android:hardwareAccelerated="false" /&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/application></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Window级别</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getWindow().setFlags(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
</span><span class='line'>WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>View级别</h3>

<p>在指定的View上关闭硬件加速：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>myView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>或者使用<code>android:layerType="software"</code>来关闭硬件加速：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>android:layout_width="fill_parent"
</span><span class='line'>android:layout_height="fill_parent"
</span><span class='line'>android:orientation="vertical"
</span><span class='line'>android:paddingLeft="2dp"
</span><span class='line'>android:layerType="software"
</span><span class='line'>android:paddingRight="2dp" &gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>如何判断一个View是否启用了硬件加速</h2>

<ul>
<li><code>View.isHardwareAccelerated()</code> returns true if the View is attached to a hardware accelerated window.</li>
<li><code>Canvas.isHardwareAccelerated()</code> returns true if the Canvas is hardware accelerated</li>
</ul>


<h2>Android Drawing Models</h2>

<p>When hardware acceleration is enabled, the Android framework utilizes a new drawing model that utilizes display lists to
render your application to the screen. To fully understand display lists and how they might affect your application, it
is useful to understand how Android draws views without hardware acceleration as well. The following sections describe
the software-based and hardware-accelerated drawing models.</p>

<h3>Software-based drawing model</h3>

<p>In the software drawing model, views are drawn with the following two steps:</p>

<ol>
<li>Invalidate the hierarchy</li>
<li>Draw the hierarchy</li>
</ol>


<p>Whenever an application needs to update a part of its UI, it invokes invalidate() (or one of its variants) on any view
that has changed content. The invalidation messages are propagated all the way up the view hierarchy to compute the
regions of the screen that need to be redrawn (the dirty region). The Android system then draws any view in the
hierarchy that intersects with the dirty region. Unfortunately, there are two drawbacks to this drawing model:</p>

<ul>
<li>First, this model requires execution of a lot of code on every draw pass. For example, if your application calls
invalidate() on a button and that button sits on top of another view, the Android system redraws the view even though it
hasn't changed.</li>
<li>The second issue is that the drawing model can hide bugs in your application. Since the Android system redraws views
when they intersect the dirty region, a view whose content you changed might be redrawn even though invalidate() was not
called on it. When this happens, you are relying on another view being invalidated to obtain the proper behavior. This
behavior can change every time you modify your application. Because of this, you should always call invalidate() on your
custom views whenever you modify data or state that affects the view’s drawing code.</li>
</ul>


<p>Note: Android views automatically call invalidate() when their properties change, such as the background color or the
text in a TextView.</p>

<h3>Hardware accelerated drawing model</h3>

<p>The Android system still uses invalidate() and draw() to request screen updates and to render views, but handles the
actual drawing differently. Instead of executing the drawing commands immediately, the Android system records them
inside display lists, which contain the output of the view hierarchy’s drawing code. Another optimization is that the
Android system only needs to record and update display lists for views marked dirty by an invalidate() call. Views that
have not been invalidated can be redrawn simply by re-issuing the previously recorded display list. The new drawing
model contains three stages:</p>

<ol>
<li>Invalidate the hierarchy</li>
<li>Record and update display lists</li>
<li>Draw the display lists</li>
</ol>


<p>With this model, you cannot rely on a view intersecting the dirty region to have its draw() method executed. To ensure
that the Android system records a view’s display list, you must call invalidate(). Forgetting to do so causes a view to
look the same even after changing it, which is an easier bug to find if it happens.</p>

<p>Using display lists also benefits animation performance because setting specific properties, such as alpha or rotation,
does not require invalidating the targeted view (it is done automatically). This optimization also applies to views with
display lists (any view when your application is hardware accelerated.) For example, assume there is a LinearLayout that
contains a ListView above a Button. The display list for the LinearLayout looks like this:</p>

<ul>
<li>DrawDisplayList(ListView)</li>
<li>DrawDisplayList(Button)</li>
</ul>


<p>Assume now that you want to change the ListView's opacity. After invoking setAlpha(0.5f) on the ListView, the display
list now contains this:</p>

<ul>
<li>SaveLayerAlpha(0.5)</li>
<li>DrawDisplayList(ListView)</li>
<li>Restore</li>
<li>DrawDisplayList(Button)</li>
</ul>


<p>The complex drawing code of ListView was not executed. Instead, the system only updated the display list of the much
simpler LinearLayout. In an application without hardware acceleration enabled, the drawing code of both the list and its
parent are executed again.</p>

<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">http://developer.android.com/guide/topics/graphics/hardware-accel.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android上使用SparseArray来替代HashMap]]></title>
    <link href="http://blog.chenming.info/blog/2012/07/04/android-sparsearray/"/>
    <updated>2012-07-04T10:50:00-07:00</updated>
    <id>http://blog.chenming.info/blog/2012/07/04/android-sparsearray</id>
    <content type="html"><![CDATA[<p>在android上做lint时，下面的代码会收到警告，提示使用<code>SparseArray</code>来代替<code>HashMap</code>来提高性能。</p>

<pre><code>private static Map&lt;Integer, CommandHandler&gt; mCmdToComponent
    = new HashMap&lt;Integer, CommandHandler&gt;();
</code></pre>

<p>详细信息如下：</p>

<p><blockquote><p>Use new SparseArray&lt;Object&gt;(...) instead for better performance</p></p><p><p>Issue: Looks for opportunities to replace HashMaps with the more efficient SparseArray<br/>Id: UseSparseArrays</p></p><p><p>For maps where the keys are of type integer, it's typically more efficient to use the Android SparseArray API. This check identifies scenarios where you might want to consider using SparseArray instead of HashMap for better performance.</p></p><p><p>This is <em>particularly</em> useful when the value types are primitives like ints, where you can use SparseIntArray and avoid auto-boxing the values from int to Integer.</p></p><p><p>If you need to construct a HashMap because you need to call an API outside of your control which requires a Map, you can suppress this warning using for example the @SuppressLint annotation.</p></p><p><p></p></blockquote></p>

<p>出于好奇看了看<code>SparseArray</code>的源代码，发现它内部是使用有序数组+二分查找来实现的。
插入、查找和删除操作的效率都是<code>log2(n)</code>。
在插入的时候还要对整个数组进行移动，代价也是不低的。
对<code>HashMap</code>来说，它更省空间和省了<code>auto-boxing</code>的开销。</p>

<p>参考:</p>

<ul>
<li><a href="http://developer.android.com/reference/android/util/SparseArray.html">http://developer.android.com/reference/android/util/SparseArray.html</a></li>
<li><a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.0.3_r1/android/util/SparseArray.java?av=f">SparseArray.java - 源代码</a></li>
<li><a href="http://code.google.com/p/re2/source/browse/util/sparse_array.h">http://code.google.com/p/re2/source/browse/util/sparse_array.h</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
